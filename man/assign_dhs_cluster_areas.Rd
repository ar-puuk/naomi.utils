% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils_survey_dhs.R
\name{assign_dhs_cluster_areas}
\alias{assign_dhs_cluster_areas}
\title{Assign survey clusters to dataset areas}
\usage{
assign_dhs_cluster_areas(survey_clusters, survey_region_areas)
}
\arguments{
\item{survey_clusters}{Interim survey clusters dataset created by
\code{\link[=create_survey_clusters_dhs]{create_survey_clusters_dhs()}}.}

\item{survey_region_areas}{Dataset of the areas contained in each survey
region, created by \code{\link[=allocate_areas_survey_regions]{allocate_areas_survey_regions()}}.

survey_region_areas is a list of candidate location areas
for each cluster. Join candidate areas and then select
the nearest area based on distance. Usually the coordinate
should be contained (distance = 0)}
}
\value{
Survey clusters dataset with an area_id assigned for each cluster
with geographic coordinates and formatted conforming to survey_clusters
schema.
}
\description{
Assign each survey cluster with geocoordinates to an area, ensuring that
the assigned area is contained in the specified survey region.
}
\details{
For each survey cluster with geographic coordinates, the area ID containing
the cluster is assigned by:
\enumerate{
\item Identify all areas contained in the survey region in which the cluster is
located. This comprises the set of candidate areas where could be located.
\item Calculate the nearest distance from the cluster coordinates to each
candidate area. This distance is 0 if a cluster is contained in an area.
\item Select the area as the area with the nearest distance, in most cases
an area containing the cluster (distance = 0).
}

sf::st_distance() is substantially slower than sf::st_join(). This function
could be (maybe much) more efficient by first using st_join() to assign the
majority of clusters that are contained in an area, then calculating the
distance for the remaining clusters that were not contained inside any of the
candidate areas.
}
